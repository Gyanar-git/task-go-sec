template: true
valuesFilePath: ./values.yml

resources:
  - name: gosec_task_gitrepo
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https

pipelines:
  - name: run_go_security_check
    configuration:
      jfrogCliVersion: 2
      runtime:
        type: image
        image:
          custom:
            name: releases-docker.jfrog.io/jfrog/pipelines-u18node
            tag: "16"
            autoPull: true
      environmentVariables:
        readOnly:
          RESOLVE_REPO: npm-virtual
    steps:
      - name: test_task_gosec
        type: Bash
        configuration:
          inputResources:
            - name: gosec_task_gitrepo
          integrations:
            - name: {{ .Values.artIntegration }}
        execution:
          onStart:
            - echo "Install GO"
            - task: jfrog/setup-go@v0.0.2
              input:
                version: "{{ .Values.goVersion }}"
                cacheIntegration: "{{ .Values.artIntegration }}"
            - echo "Done installation of GO"
          onExecute:
            - pushd $res_gosec_task_gitrepo_resourcePath
            - go version
            # Configure JFrog CLI
            - jfrog npmc --repo-resolve $RESOLVE_REPO
            # Install npm dependencies
            - jfrog npm install
            # Build task runnable script bundled with dependencies
            - npm run dist
            - popd

            # Run task
            - task: $res_gosec_task_gitrepo_resourcePath
              id: go_sec
              input:
                # resourceName of the task
                resourceName: "gosec_task_gitrepo"
                # Source code path where go.mod file resides
                sourcePath:
                # Comma separated list of rules IDs to exclude
                excludeRules:
                # Comma separated list of rules IDs to include
                includeRules:
                # Provide the command argument options here
                commandArgs: --tests -exclude-dir=\.*test\.*
                # Set output format. Valid options are: json, yaml, csv, junit-xml, html, sonarqube, golint, sarif or text (default "text")
                outputFormat: text
          onComplete:
            - echo "Step done!"